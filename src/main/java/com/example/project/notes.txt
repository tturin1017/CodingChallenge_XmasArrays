Day 1: Elf Name Generator
Objective: Create a program that generates festive elf names based on user input.

Requirements:

Ask the user to input their first name.
Use a predefined array of elf names  (e.g., ["Glitter", "Chocolate","Tiny","Snowflake","Frosty"]).
Combine the user's first name with a randomly chosen elf name (see array above) to generate a new name.

Throw Exception for name if it is null or empty. You will have to research how to catch an IllegalArgumentException
Example:
In: John
Out: Your elf name is: Glitter John


Day 2: Sorting Santa's Naughty and Nice List
Objective: Help Santa sort names into "Nice" and "Naughty" lists.

Requirements:

Prompt the user to input a list of names separated by commas.
Randomly assign each name to either the "Nice" or "Naughty" list.
Display the sorted lists.
Example Input/Output:

Input: Alice, Bob, Charlie, Eve
Output:
mathematica
Copy code
Nice List: Alice, Charlie  
Naughty List: Bob, Eve

Day 3: Snowflake Pattern Generator
Objective: Print a snowflake-like pattern using stars (*).

Requirements:

Ask the user to input the size of the snowflake (an odd number).
Generate a symmetric pattern resembling a snowflake.
Handle cases where the input is invalid (e.g., an even number).
Example Input/Output:

Input: 5
Output:
markdown
Copy code
  *  
 * *  
*****  
 * *  
  *  
Day 4: Reindeer Race Simulator
Objective: Simulate a race between Santa's reindeer.

Requirements:

Create an array of reindeer names (e.g., ["Dasher", "Dancer", "Prancer", "Vixen", "Comet", "Cupid", "Donner", "Blitzen"]).
Randomly generate a "distance traveled" for each reindeer (e.g., a random number between 50 and 100).
Display the race results, showing the distance traveled by each reindeer and identifying the winner.
Example Output:

makefile
Copy code
Dasher: 72 meters  
Dancer: 80 meters  
Prancer: 65 meters  
Vixen: 77 meters  
Comet: 90 meters  
Cupid: 85 meters  
Donner: 74 meters  
Blitzen: 92 meters  

Winner: Blitzen!